#!/bin/bash

#
#   Resource Agent for managing IPv4 resources depending on a custom status command.
#
#   License:      GNU General Public License (GPL)
#   (c) 2015      Vyronas Tsingaras, Aristotle University of Thessaloniki
#

: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs
. ${OCF_FUNCTIONS_DIR}/ocf-returncodes

meta_data() {
        cat <<END
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="ip_process" version="0.1">
  <version>0.1</version>
  <longdesc lang="en">
This is a resource agent for an IP that depends on the exit code
of an external command to decide whether to keep the IP or not.
  </longdesc>
  <shortdesc lang="en">Simple IP resource agent that uses
a custom status command
  </shortdesc>
  <parameters>
    <parameter name="ip" unique="0" required="1">
      <longdesc lang="en">
      IP to manage.
      </longdesc>
      <shortdesc lang="en">IP</shortdesc>
      <content type="string"/>
    </parameter>
        <parameter name="status_cmd" unique="0" required="1">
        <longdesc lang="en">
        Path to the status command, should return 0 on success,
        anything else on failure.
        </longdesc>
        <shortdesc lang="en">Path to the status command.</shortdesc>
        <content type="string"/>
        </parameter>
  </parameters>
  <actions>
    <action name="start"        timeout="5" />
    <action name="stop"         timeout="5" />
    <action name="monitor"      timeout="5"
                                interval="10" depth="0"/>
    <action name="meta-data"    timeout="5" />
    <action name="validate-all"   timeout="20" />
  </actions>
</resource-agent>
END

        exit $OCF_SUCCESS
}

ip_process_validate() {
        if [ X"$OCF_RESKEY_ip" = "X" ]; then
                ocf_log error "IP address (the ip parameter) is mandatory"
                exit $OCF_ERR_CONFIGURED
        fi

        if [ X"$OCF_RESKEY_status_cmd" = "X" ]; then
                ocf_log error "The custom status command is mandatory"
                exit $OCF_ERR_CONFIGURED
        fi

        exit $OCF_SUCCESS
}

ip_process_start() {
        ip address add "${OCF_RESKEY_ip}/24" dev eth0
        exit $OCF_SUCCESS
}

ip_process_stop() {
        ip address del "${OCF_RESKEY_ip}/24" dev eth0
        exit $OCF_SUCCESS
}

ip_process_monitor() {
        if ip addr show | egrep "${OCF_RESKEY_ip}/24"; then
                $OCF_RESKEY_status_cmd
                if [[ $? == 0 ]]; then
                        exit $OCF_SUCCESS
                fi
                exit $OCF_ERR_GENERIC
        fi
        exit $OCF_NOT_RUNNING
}

case $__OCF_ACTION in
start)          ip_process_start
                ;;
stop)           ip_process_stop
                ;;
monitor)        ip_process_monitor
                ;;
meta-data)      meta_data
                ;;
validate-all)   ip_process_validate
                ;;
*)
                exit $OCF_ERR_UNIMPLEMENTED
                ;;
esac

